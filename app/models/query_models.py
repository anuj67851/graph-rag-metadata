from pydantic import BaseModel, Field
from typing import List, Optional
from app.models.common_models import Subgraph

class QueryRequest(BaseModel):
    """
    Represents the input for a user query to the backend.
    """
    query: str = Field(..., min_length=1, description="The natural language query from the user.")
    filter_filenames: Optional[List[str]] = Field(
        default=None,
        description="An optional list of filenames to restrict the query to."
    )
    # Optional: session_id for chat history, user_id for personalization, etc.
    # session_id: Optional[str] = None

class SourceChunk(BaseModel):
    """
    Represents a single source text chunk used as context for the RAG response.
    """
    source_document: str = Field(..., description="The filename of the source document for this chunk.")
    chunk_text: str = Field(..., description="The actual text content of the chunk.")
    score: float = Field(..., description="The similarity score from the vector search.")
    entity_ids: Optional[List[str]] = Field(default=None, description="List of entity IDs found in this chunk.")


class QueryResponse(BaseModel):
    """
    Represents the full response from the backend for a user query.
    This will be sent to the Streamlit UI.
    """
    llm_answer: str = Field(..., description="The final natural language answer generated by the LLM.")
    subgraph_context: Subgraph = Field(..., description="The subgraph data used as context for the LLM. For visualization.")
    source_chunks: List[SourceChunk] = Field(..., description="The list of source text chunks used as context for the LLM.")

class VectorSearchRequest(BaseModel):
    """
    Represents the input for a direct vector search against the vector store.
    """
    query: str = Field(..., min_length=1, description="The natural language query to search for.")
    top_k: int = Field(default=10, ge=1, le=100, description="The number of top matching chunks to retrieve from the initial vector search. Should always be greater than rerank_top_n.")
    filter_filenames: Optional[List[str]] = Field(
        default=None,
        description="An optional list of filenames to restrict the search to."
    )
    alpha: Optional[float] = Field(
        default=None,
        ge=0, le=1,
        description="The weighting for hybrid search. 0=BM25 (keyword), 1=dense (vector), 0.5=balanced. If None, uses the system default from config.yaml."
    )
    enable_reranking: bool = Field(
        default=False,
        description="If true, a cross-encoder will re-rank the initial search results for better relevance."
    )
    rerank_top_n: int = Field(
        default=3,
        ge=1, le=25,
        description="The final number of chunks to return after re-ranking. Only used if enable_reranking is true."
    )